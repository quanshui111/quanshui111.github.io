<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo 设置]]></title>
    <url>%2F2020%2F09%2F27%2Fhexo-%E8%AE%BE%E7%BD%AE.html</url>
    <content type="text"><![CDATA[1文章显示图片 文章发布之后，图片不显示 需要设置下 安装个插件 1$ cnpm install hexo-asset-image --save 改下主站设置 _config.yml 1post_asset_folder: false 改成 ture 重新生成 启动 源文件目录]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 使用]]></title>
    <url>%2F2020%2F09%2F27%2Fhexo%E6%96%87%E6%A1%A3.html</url>
    <content type="text"><![CDATA[安装node和npm node 下载地址 1https://nodejs.org/en/ 用12.18.4 的吧 ，14 版本的发布github 时报错。 node npm（包管理器） C:\Users\Administrator&gt;node -vv12.18.4 C:\Users\Administrator&gt;npm -v6.14.6 node_global 和 node_cache 新建两个文件夹 ，存放全局安装的插件 （全局安装包 默认安装到 c盘 ） ； npm config set prefix “D:\nodejs\node_global” npm config set cache “D:\nodejs\node_cache” 另外，将全局安装包位置设置成系统环境变量，方便使用全局安装的包； 全局安装了hexo 和 cnpm ；这样命令行 可以直接使用 hexo 和 cnpm 命令了 安装cnpm命令 1npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm 安装与否 跟hexo 没有关系 ，只是下载包会快； ，淘宝出品 安装完了，以后用cnpm安装其他 包,查看下版本信息 cnpm -vcnpm@6.1.1 (D:\nodejs\node_global\node_modules\cnpm\lib\parse_argv.js)npm@6.14.8 (D:\nodejs\node_global\node_modules\cnpm\node_modules\npm\lib\npm.js)node@14.11.0 (D:\nodejs\node.exe)npminstall@3.27.0 (D:\nodejs\node_global\node_modules\cnpm\node_modules\npminstall\lib\index.js)prefix=D:\nodejs\node_globalwin32 x64 10.0.18363registry=https://r.npm.taobao.org 安装hexo cnpm install -g hexo-cli 使用hexo初始化博客 建个空文件夹 blog hexo init 初始化一个博客 ，自动下载依赖和主题； 启动博客hexo clean 清除 hexo g 生成静态文件 hexo s 启动 安装git下载地址 1https://git-scm.com/download/win 查看版本 C:\Users\Administrator&gt;git –versiongit version 2.28.0.windows.1 配置用户信息 git config – global user.name ‘用户名’ git config – global user.email ‘邮箱’ 注意： git config –global 参数，有了这个参数表示你这台机器上所有的git仓库都会使用这个配置 安装hexo-deployer-git 发布到github 1cnpm install --save hexo-deployer-git 有 –save 参数才会把模块写入到 packages.json github仓库博客创建完之后，需要发布到github 上 ，得有个仓库。 注 ： github 上的仓库必须 是 你的登录昵称 (quanshui111) 加github.io 生成ssh通讯公钥 - 用于本地电脑 和 github 或者gitee 远程链接 命令： 1ssh-keygen -t rsa -C “quanshui0312@qq.com” 打开pub 文件，复制内容到 github 测试 1$ ssh -T git@github.com The authenticity of host ‘github.com (52.74.223.119)’ can’t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added ‘github.com,52.74.223.119’ (RSA) to the list of known hosts.Hi quanshui111! You’ve successfully authenticated, but GitHub does not provide shell access. hexo设置github远程仓库主站_config.yml 文件中修改 1234deploy: type: git repository: https://github.com/quanshui111/quanshui111.github.io branch: master 发布到github1hexo d 需要输入 github 的用户名 ，密码；第一次发布需要，再次发布 由于已经设置ssh 密钥，不用密码登录了； 主题 https://github.com/litten/hexo-theme-yilia 目录说明scaffolds 脚手架，也就是一个工具模板scripts 写文件的js，扩展hexo的功能source 存放博客正文内容source/_drafts 草稿箱source/_posts 文件箱themes 存放皮肤的目录themes/landscape 默认的皮肤_config.yml 全局的配置文件db.json 静态常量 新建文章 hexo new “hexo 相关” 命令执行完后，就会在 \source\_posts 目录下产生文件了 标准 1234title: hexo 使用date: 2020-09-27 09:35:03categories: "工具"tags: [hexo, 测试] : 后边有空格 ,后边有空格 ，否则无效]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jquery跨域访问]]></title>
    <url>%2F2016%2F04%2F19%2FJquery%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE.html</url>
    <content type="text"><![CDATA[为了简便 ，再集群应用下某个页面 ，点击一次，触发集群下所有节点的功能（servlet实现），根据配置文件的不同，使每个节点读取不同的配置项，处理不同的数据。 使用页面调用时，遇到了跨域的问题，页面只能访问到启动页面所在机器的节点上。其他节点访问不到 。 后来查了下 ，html 所有带src 属性的标签，都支持跨域；不自己实现了，jquery 估计也是利用这个特性 使用了jsonp 协议。 - $(function() { var array = new Array(); array.push(&quot;http://90.89.78.91:7001/apyyli/&quot;); array.push(&quot;http://90.89.78.91:7002/apyyli/&quot;); array.push(&quot;http://90.89.78.93:7004/apyyli/&quot;); array.push(&quot;http://90.89.78.95:7005/apyyli/&quot;); array.push(&quot;http://90.89.78.95:7006/apyyli/&quot;); array.push(&quot;http://90.89.78.97:7007/apyyli/&quot;); array.push(&quot;http://90.89.78.97:7008/apyyli/&quot;); array.push(&quot;http://90.89.78.153:7009/apyyli/&quot;); array.push(&quot;http://90.89.78.153:7010/apyyli/&quot;); array.push(&quot;http://90.89.78.155:7011/apyyli/&quot;); array.push(&quot;http://90.89.78.155:7012/apyyli/&quot;); array.push(&quot;http://90.89.78.191:7013/apyyli/&quot;); array.push(&quot;http://90.89.78.191:7014/apyyli/&quot;); array.push(&quot;http://90.89.78.193:7015/apyyli/&quot;); array.push(&quot;http://90.89.78.193:7016/apyyli/&quot;); $(&quot;#exe&quot;).click(function() { for (var i = 0; i &lt; array.length; i++) { $.ajax({ url: array[i] + &apos;Tqsj_Pl?stop1=0&apos;, type: &apos;GET&apos;, dataType: &apos;jsonp&apos;, jsonp:&apos;callback&apos;, success:function(result){ alert(&apos;ok&apos;); } }); } }) $(&quot;#stop&quot;).click(function() { for (var i = 0; i &lt; array.length; i++) { $.ajax({ url: array[i] +&apos;Tqsj_Pl?stop1=1&apos;, type: &apos;GET&apos;, dataType: &apos;jsonp&apos;, jsonp:&apos;callback&apos;, success:function(result){ alert(&apos;ok&apos;); } }); } }) }) 两个功能 ，一个启动，一个停止，测试了下 ，可以触发数组中所有集群节点的功能。]]></content>
      <categories>
        <category>Jquery</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle表与xml转换]]></title>
    <url>%2F2016%2F04%2F19%2FOracle%E8%A1%A8%E4%B8%8Exml%E8%BD%AC%E6%8D%A2.html</url>
    <content type="text"><![CDATA[Oracle 中dbms_xmlgen 包可以实现关系表 转换成xml。 简单形式 select dbms_xmlgen.getXML(‘select * from dm_sjhd where sjhd_dm=’’2001’’ ‘) from dual 结果： &lt;?xml version=&quot;1.0&quot;?&gt; &lt;ROWSET&gt; &lt;ROW&gt; &lt;SJHD_DM&gt;2001&lt;/SJHD_DM&gt; &lt;SJHD_MC&gt;[上月累计数] 栏次1 计费收入-- 应征收入 本年累计&lt;/SJHD_MC&gt; &lt;CMPTYPE&gt;= &lt;/CMPTYPE&gt; &lt;ERRORDIR&gt;= &lt;/ERRORDIR&gt; &lt;ERRORPRECISION&gt;0&lt;/ERRORPRECISION&gt; &lt;SIGN_OVERWRITE&gt;N&lt;/SIGN_OVERWRITE&gt; &lt;SIGN_QUERY&gt;Y&lt;/SIGN_QUERY&gt; &lt;SIGN_FORCE&gt;N&lt;/SIGN_FORCE&gt; &lt;XYBZ&gt;N&lt;/XYBZ&gt; &lt;FILTER&gt;|26501|&lt;/FILTER&gt; &lt;SJHDLX_DM&gt;02&lt;/SJHDLX_DM&gt; &lt;/ROW&gt; &lt;/ROWSET&gt; 绑定变量 declare d varchar2(10); ctx number;--上下文 xmldoc clob; --xml 结果 Clob类型存储 begin ctx := dbms_xmlgen.newcontext(&apos;select * from dm_sjhd where sjhd_dm =:d&apos;); dbms_xmlgen.setbindvalue(ctx, &apos;d&apos;, &apos;2001&apos;); xmldoc := dbms_xmlgen.getxml(ctx); dbms_output.put_line(xmldoc); dbms_xmlgen.closecontext(ctx); end ; 也可以实现上面的效果。 修改结果xml 中的节点名 dbms_xmlgen.setRowSetTag(ctx,&apos;dm_sjhd&apos;); dbms_xmlgen.setRowTag(ctx,&apos;item&apos;); 结果： &lt;?xml version=&quot;1.0&quot;?&gt; &lt;dm_sjhd&gt; &lt;item&gt; &lt;SJHD_DM&gt;2001&lt;/SJHD_DM&gt; &lt;SJHD_MC&gt;[上月累计数] 栏次1 计费收入-- 应征收入 本年累计&lt;/SJHD_MC&gt; &lt;CMPTYPE&gt;= &lt;/CMPTYPE&gt; &lt;ERRORDIR&gt;= &lt;/ERRORDIR&gt; &lt;ERRORPRECISION&gt;0&lt;/ERRORPRECISION&gt; &lt;SIGN_OVERWRITE&gt;N&lt;/SIGN_OVERWRITE&gt; &lt;SIGN_QUERY&gt;Y&lt;/SIGN_QUERY&gt; &lt;SIGN_FORCE&gt;N&lt;/SIGN_FORCE&gt; &lt;XYBZ&gt;N&lt;/XYBZ&gt; &lt;FILTER&gt;|26501|&lt;/FILTER&gt; &lt;SJHDLX_DM&gt;02&lt;/SJHDLX_DM&gt; &lt;/item&gt; &lt;/dm_sjhd&gt; 使用游标 declare d varchar2(10); ctx number;--上下文 xmldoc clob; --xml 结果 Clob类型存储 type cur is ref cursor ; cc cur ; begin d:=&apos;2001&apos;; open cc for &apos;select * from dm_sjhd where sjhd_dm =:d&apos; using d; ctx := dbms_xmlgen.newcontext(cc); dbms_xmlgen.setRowSetTag(ctx,&apos;dm_sjhd&apos;); dbms_xmlgen.setRowTag(ctx,&apos;item&apos;); xmldoc := dbms_xmlgen.getxml(ctx); dbms_output.put_line(xmldoc); dbms_xmlgen.closecontext(ctx); close cc; end ; 动态sql 中使用这个比较灵活。直接在游标中绑定变量。 然后生成xml。 如果需要对xml属性和节点更精细的操作使用xmlelement ； select xmlelement(&quot;sjhd&quot;, XMLATTRIBUTES(sjhd_dm AS &quot;id&quot;),xmlelement(&quot;name&quot;,sjhd_mc)).getstringval() from dm_sjhd 结果： 1 &lt;sjhd ID=&quot;2001&quot;&gt;&lt;name&gt;[上月累计数] 栏次1 计费收入-- 应征收入 本年累计&lt;/name&gt;&lt;/sjhd&gt; 2 &lt;sjhd ID=&quot;2002&quot;&gt;&lt;name&gt;[上月累计数] 栏次2 计费收入-- 免征收入 本年累计&lt;/name&gt;&lt;/sjhd&gt; 3 &lt;sjhd ID=&quot;2004&quot;&gt;&lt;name&gt;[上月累计数] 栏次5 费额计算-- 应征收入减除额 本年累计&lt;/name&gt;&lt;/sjhd&gt; 4 &lt;sjhd ID=&quot;2005&quot;&gt;&lt;name&gt;[上月累计数] 栏次6 费额计算-- 免征收入减除额 本年累计&lt;/name&gt;&lt;/sjhd&gt; 5 &lt;sjhd ID=&quot;0403&quot;&gt;&lt;name&gt;预缴数&lt;/name&gt;&lt;/sjhd&gt; 用到的时候再查。 xmltype (Oracle一种数据类型，同varchar2) ，可以将对象转换为xml ，然后输出成string clob，blob等对象。]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>xml Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[带图片文章]]></title>
    <url>%2F2016%2F01%2F07%2F%E5%B8%A6%E5%9B%BE%E7%89%87%E6%96%87%E7%AB%A0.html</url>
    <content type="text"><![CDATA[操作hexo 长时间不用就忘了 做些记录 ，不太全，想起来哪些之后再补充 ，下面这些内容是在有了node 环境和 github 之后才行。这里就不具体说了1. 新建文章 hexo new [layout] “名称” 例如新建了一个文章 名称 “hexo 相关” hexo new &quot;hexo 相关&quot; 命令执行完后，就会在 \source_posts 目录下产生文件了 。打开 title: hexo 相关 date: 2016-01-07 10:26:50 layout: Post categories: Hexo tags: 自己设置 categories 文章分类 ，layout 布局。 \scaffolds 脚手架 文件夹下 可以自己定义 。例如上面Post 布局： layout: title: {{ title }} date: {{ date }} categories: tags: 运行hexo new “名称” 命令后 ，估计就是把 title 和 date 赋值了 。 如果hexo new Post “名称” ,对应的 layout： post 也会 赋值。 可以增加 photos： 图片路径 ，使文章带图片效果。 当然可以自定义其他的 布局 ，只不过在脚手架文件夹中新建文件就可以了 。 2.hexo g 生成静态文件创建的文件是md格式的，hexo 可以根据文件中使用的 categories layout 等设置形成固定的目录和html文件 。/public 目录存放的就是 网站的静态文件。 hexo clean 上面命令是清除public内容 。然后可以用 hexo g 命令重新生成。 3.hexo d 部署到github 要想将文章发布到 github 得有个github账户。申请就不说了 。 建个仓库 ，仓库的名字 ：账户 .github.com ，以后访问就用这个名字访问了 。 github 上传支持 https 和 ssh ，我用的https 每次部署时都输入用户名密码。使用ssh需要生成 公钥和私钥，并放到对应的位置，公钥弄到github上。然后每次部署就不要用户名密码了。 4.hexo s 启动本地服务hexo 支持本地访问，默认端口 4000 E:\github\hexo\quanshui111&gt;hexo s INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 如果没问题，使用http://localhost:4000/ 直接可以看到你编辑的内容了 。 5.hexo 安装 和 初始化hexo 安装的时候 用npm 安装 npm install -g hexo npm install hexo-server --save npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save 这些看情况安装 。 hexo init &lt;文件夹&gt; 上面命令会初始化hexo 目录。是工作的目录，如下： scaffolds 脚手架，也就是一个工具模板 scripts 写文件的js，扩展hexo的功能 source 存放博客正文内容 source/_drafts 草稿箱 source/_posts 文件箱 themes 存放皮肤的目录 themes/landscape 默认的皮肤 _config.yml 全局的配置文件 db.json 静态常量 6._config.yml全局配置文件下面列出部分修改： # Sitetitle: logo的标题文本author: 作者 # URLurl: http://quanshui111.github.io/ 访问路径 # Extensionstheme: pacman主题 # Deployment github部署的位置和分支deploy: type: git repository: 上传到github的地址 branch: master 7.主题_config.yml的一些配置我使用的 pacman 主题 ,下面列下主要的修改 ： 设置主页菜单的内容menu: 主页: / 归档: /archives 简介: /about logo图片 以及fav 图标imglogo: enable: true src: img/logo.jpgfavicon: img/favicon.jpg 作者图片 在footer 部分author_img: img/author.jpg 作者签名 在footer部分intro_line1: “不作死就不会死。”intro_line2: “no zuo no die.” 加多说评论系统下面short_name 也就是你的二级域名，即http://aaa.duoshuo.com 去掉.duoshuo.com前面的部分duoshuo: enable: true short_name: aaa]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Oracle 统计信息]]></title>
    <url>%2F2016%2F01%2F07%2FOracle-%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF.html</url>
    <content type="text"><![CDATA[v$mystat视图中只会有当前用户的会话信息 v$sesstat会有整个实例内所有会话信息。因此在v$sesstat中自然包括v&amp;mystat的统计信息。 两个视图结构一致，只是统计数据不一致。 **下面是两个视图字段说明：** SID表示会话编号，与v$session中SID相对应。 STATISTIC# 表示统计项 VALUE 表示统计项相关的值 2.一般情况下v$mystat,v$sesstat会与v$statname一起配合使用。 sql&gt; desc v$statname; Name Type Nullable Default Comments ---------- ------------ -------- ------- -------- STATISTIC# NUMBER Y NAME VARCHAR2(64) Y CLASS NUMBER Y STATISTIC#视图中STATISTIC#与v$mystat,v$sesstat中STATISTIC#字段是相关联的。 NAME则是对应的英文信息，比如说要查某条DML语句所产生的redo信息。可以这样写: select value from v$mystat t,v$statname t1 where t.STATISTIC# = t1.STATISTIC# and t1.NAME = &apos;redo size&apos; 其它信息也是如此，只需将t1.name换成相对应的英文名称即可]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>v$sesstat v$mystat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle wm_concat和pivot用法]]></title>
    <url>%2F2015%2F12%2F01%2FOracle-wm-concat%E5%92%8Cpivot%E7%94%A8%E6%B3%95.html</url>
    <content type="text"><![CDATA[函数wm_concat 资料参考自：http://www.th7.cn/db/Oracle/201501/86033.shtml 1.基本使用该函数可以把多行记录中的列值以”,”号分隔起来,并显示成一行。例如有如下表： 执行sql 效果如下： select id,wm_concat(name) from t group by id 2.扩展利用wm_concat创建视图。user_tab_columns 表记录了用户表的元数据。使用如下sql 生成创建视图的语句 : select &apos;create or replace view v_t as select &apos; || wm_concat(column_name) || &apos; from T&apos; sqlStr from user_tab_columns where table_name = &apos;T&apos;; 对于列比较多的表很实用。 函数pivot 和 unpivot在Oracle 11g中，Oracle 又增加了2个查询：pivot（行转列） 和unpivot（列转行） 行转列 （pivot）有如下表：要求显示出每种水果的销量合计，一行显示。 select * from (select name, nums from demo) pivot(sum(nums) for name in(&apos;苹果&apos; 苹果, &apos;橘子&apos;, &apos;葡萄&apos;, &apos;芒果&apos;)); 执行上面sql，得到的效果：对于上面sql 来说 ，pivot 是对 给定结果集 (select name, nums from demo) 按照name进行分组， 貌似是对除了pivot 里边除了 聚合函数列之外的 所有列进行分组。 例如 select * from (select name, nums from demo) pivot( count(1) for name in(&apos;苹果&apos;, &apos;橘子&apos;, &apos;葡萄&apos;, &apos;芒果&apos;, &apos;西瓜&apos;) ) a ; 则是对name nums 两列进行分组。对于没有分组的列 和 需要旋转的列（in 子句前面的列） 都会在结果中显示 ，如nums. 另外in 子句里可以随意指定，没有则显示空。 但是sql 写成下面会报错,貌似不支持此类型的子查询： select * from (select name, nums from demo) pivot(sum(nums) for name in(select distinct name from demo)); 如果name列比较多的话，in里边自己写那就麻烦了 。这是个问题。以后再找解决方案。 百度了下，xml 类型的时候可以使用any 关键字和子查询,但是返回的结果是xml结构的，如下： select * from (select name, nums from demo) pivot xml(sum(nums) for name in(select distinct name from demo)); 执行结果如下：xml预览图 另外，可以对多列进行旋转。 select * from (select salary, department_id from employee) pivot(sum(salary) sumsal, avg(salary) avgsal for(department_id) in (10,20,30)); 列转行 unpivot下面是4中水果4个季度的销售情况： select id , name, jidu, xiaoshou from Fruit unpivot (xiaoshou for jidu in (q1, q2, q3, q4) ) 横向展示出每种水果每个季度的销售情况。 jidu 字段为虚拟列 in 原来的列名，将原来列名 作为当前jidu 的值。将原来列值 作为 xiaoshou虚拟列的 值。]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>wm_concat pivot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle Scn问题描述]]></title>
    <url>%2F2015%2F11%2F23%2FOracle-Scn%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0.html</url>
    <content type="text"><![CDATA[Oracle Scn 描述Oracle数据库内部的一种逻辑时间戳，通过SCN将数据库内的事件理清次序， 这是保证事务属性ACID的必要信息。 数据库使用SCN来帮助实现查询和跟踪变化。举例来说，当一个事务更新一行数据，那么数据库就需要将该update发生时的SCN记录下来，该事务(transaction)中的其他修改操作通常都会使用同样的SCN。当一个事务commit提交，数据库又会相应地记录提交时的SCN。 多个事务同事commit可能会共享同一个SCN。 1.硬限制 Oracle数据库最大可以使用到的SCN上限值是 281万亿，即281,474,976,710,656(2的48次方)。这是对SCN的硬限制，理论上一个数据库的SCN总是不能超过281万亿，以每秒16K的增速计算，花费557年SCN上限才会被耗尽，作为一个hard limit。 2.软限制 SCN headroom 为了保证SCN的增长速度不要过于离谱，Oracle使用了一种基于时间的限量供应SCN的系统。 SCN headroom计算 将SCN的增长率和时间流逝关联起来，确保SCN的限量增长，保证Oracle数据库理论上可以处理500年的数据。SCN headroom = A – B (10.2.0.5中默认是744（31天）)A: 1988到当前时间的秒数 * 16384(16k) 12345678select(((to_number(to_char(sysdate,'YYYY'))-1988)*12*31*24*60*60) +((to_number(to_char(sysdate,'MM'))-1)*31*24*60*60) + (((to_number(to_char(sysdate,'DD'))-1))*24*60*60) +(to_number(to_char(sysdate,'HH24'))*60*60) +(to_number(to_char(sysdate,'MI'))*60) +(to_number(to_char(sysdate,'SS'))))*16384 from dual; (current_time-1988) * 16384 – (current_scn) = headroom 当前SCN查询 1SELECT current_scn FROM v$database; Oracle中headroom：_external_scn_rejection_threshold_hours 3.引发问题 常规情况下，若数据库尝试超过当前的SCN最大值，数据库将会cancel取消掉引发该超越事件的事务， 在应用程序层面将看到一个错误。在接下来的一秒钟，上限值会随着时间而增长16k，因此通常应用程序会在短暂停顿后继续工作。 极少数情况下，数据库可能需要为了保护自身的完整性而shutdown关闭，理论上不会造成数据丢失或corrupted]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>Scn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nodejs 筛选最近时间文件]]></title>
    <url>%2F2015%2F11%2F23%2FNodejs-%E7%AD%9B%E9%80%89%E6%9C%80%E8%BF%91%E6%97%B6%E9%97%B4%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[将修改的文件从项目中提取出来生成升级包文件 。自己测试使用 引入对应库 var fs =require(&quot;fs&quot;); stat = fs.stat; p = require(&quot;path&quot;); moment = require(&quot;moment&quot;); /* copy晚于设定日期的文件到目标路径，保持目录结构 *@param {[type]}原路径 *@param {[type]}目标路径 *@param {[type]}设定日期 *@return {[type]} */ var copyClass = function (src,dest,findDate ){ fs.readdir(src,function(err,paths){ if(err){ throw err; } paths.forEach(function(path){ var _src=src + &quot;/&quot; +path, _dest = dest + &quot;/&quot; + path, readable,writable; stat(_src,function(err,st){ if(err){ throw err; } if(st.isFile()){ if(p.extname(_src)==&apos;.class&apos; &amp;&amp; moment(st.mtime).format(&quot;YYYY-MM-DD HH:mm:ss&quot;)&gt;=moment(findDate).format(&quot;YYYY-MM-DD HH:mm:ss&quot;) ){ mkdirsSync( p.dirname(_dest) ); // 创建读取流 readable = fs.createReadStream( _src ); // 创建写入流 writable = fs.createWriteStream( _dest ); // 通过管道来传输流 readable.pipe( writable ); } }else if (st.isDirectory()){ copyClass(_src,_dest,findDate); } }); }); }); } /* 同步创建多级目录 @param {[type]}目录 @return {[type]} */ function mkdirsSync(dirpath) { if (!fs.existsSync(dirpath)) { var pathtmp; // console.log(dirpath.split(&apos;/&apos;)); dirpath.split(&apos;/&apos;).forEach(function(dirname) { if (pathtmp) { pathtmp = p.join(pathtmp, dirname); } else { pathtmp = dirname; } // console.log(pathtmp); if (!fs.existsSync(pathtmp)) { if (!fs.mkdirSync(pathtmp)) { return false; } } }); } return true; } //最后调用 var main =function (){ var data1=&apos;2015-11-16 15:01:01&apos;; var dest=&quot;C:/Users/Tax/Desktop/&quot;+data1.substring(0,10)+&quot;/classes&quot;; var src=&quot;E:/Workspaces/testprj/WebRoot/WEB-INF/classes&quot;; copyClass(src,dest,data1); } main();]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
</search>
